node.js의 개요
 - node.js는 구글 클롬 브라우저에서 javascript 코드를 처리하기 위한
    엔진인 v8 엔진을 사용하는 서버측 프로그램 개발을 위한 플랫폼이다.

- node.js는 빠르고 확장 가능한 네트워크 애플리케이션을 
    쉽게 구축할 수 있도록 개발되었다.

- node.js는 가볍고 효율적인 비동기식으로 이벤트를 처리하여 
    분산 처리가 가능하다.

- node.js는 한번 작성된 프로그램은 다양한 플랫폼에서 동작할 수 있도록
    설계되어 있다. (windows, linux, macOS)


node.js의 특징
 - 비동기식 이벤트 처리
    : 개발자가 만든 프로그램에서 발생되는 여러 사건들을
        비동기 방식으로 동시에 처리될 수 있도록 지원한다.
 - 빠른속도
    : 구글 크롬 브라우저에 탑재되어 있는 v8 Javascript 엔진을
        이용하여 처리하므로 코드 처리가 굉장히 빠르다
 - 단일 쓰레드이지만 확장성이 뛰어나다
    : node.js는 단일 쓰레딩 방식을 사용함으로써, 
        Apache Tomcat과 같은 기존의 서버들 보다 확장성이 
        용이하고 훨씬 많은 수의 클라이언트 요청을 할 수 있다.
 - 버퍼링이 없다.
    : node.js 응용 프로그램은 데이터 입출력시 버퍼링 방식을
        사용하지 않는다.
 - node.js는 현재 ebay, GE, GoDaddy, PayPal, Uber, 
    Wikipins, Yahoo, Yammer, facebook, twitter 등
    글로벌하게 사용되어 지고 있다.


node.js 모듈 사용하기
 - node.js 에서 자주 사용하는 함수의 경우 별도의 js 파일에
    만들어주면 되는데 이 때 모듈이라는 개념을 사용한다.
 - node.js 에서는 js 파일이 하나의 모듈이 되며 이는 
    하나의 객체 단위로 생각하면 된다.
 - export 객체에 필요한 함수를 추가하여 준다.
    
    exports.f2 = function() {
        console.log("f2 함수 호출);
    }


 - require() 함수를 이용해 모듈 객체를 생성한다.

    var test = require("./second.js");

 - 모듈 객체를 이용해 함수를 호출한다.

    test.f2();

 - node.js는 Javascript 문법과 모듈 사용법만 알면
    내용은 모두 학습을 한 것이다.

 - 그 이외 내용들은 어떤 모듈들이 있는지, 각 모듈은 
    어떤 기능을 제공하는지 학습하는 것이다.



Assert 모듈
 - Assert 모듈은 개발자가 만든 코드가 동작하기 전에 
    데이터나 수식에 대한 검사를 할 수 있는 모듈이다.

 - Assert 모듈에서 제공하고 있는 함수들을 이용하여
    검사할 때 위배가 될 경우 오류가 발생하고 프로그램이
    중지된다.

    var assert = require("assert");

 - assert
   : 주어진 변수가 수식의 값이 0이거나 false 경우 오류가 발생한다.
 - equal
   : 주어진 두 변수나 수식의 결과 값이 다를 경우 오류가 발생한다.
    값의 타입은 무시한다.
 - strictEqual
   : 주어진 두 변수나 수식의 결과 값이 다를 경우 오류가 발생한다.
    값의 타입도 검사한다.
 - notEqual
   : 주어진 두 변수나 수식의 결과 값이 같을 경우 오류가 발생한다.
    값의 타입은 무시한다.
 - notStrictEqual
   : 주어진 두 변수나 수식의 결과 값이 같을 경우 오류가 발생한다.
    값의 타입도 검사한다.

 - deepEqual
   : 두 객체의 멤버가 동일하지 않을 경우 오류가 발생한다.
   값의 타입은 무시하낟.
 - deepStrictEqual
   : 두 객체의 멤버가 동일하지 않을 겨우 오류가 발생한다.
   값의 타입도 검사한다.
 - notDeepEqual
   : 두 객체의 멤버가 동일할 경우 오류가 발생한다.
      값의 타입은 무시한다.
 - notDeepStrictEqual
   : 두 객체의 멤버가 동일할 경우 오류가 발생한다.
      값의 타입도 검사한다.



Buffer 모듈
 - Buffer 모듈은 기억 공간을 동적으로 만들 때 사용한다.
 - Javascript는 자료형이 따로 존재하지 않으며, 브라우저에
   의해 탄력적으로 관리된다.
 - 만약, 개발자가 원하는 사이즈의 메모리 공간을 사용하고자 
   한다면 Buffer 모듈을 이용해 동적ㅇ로 기억 공간을 
   만들어서 사용하면 된다.
 - Buffer 모듈을 모듈 생성 없이 사용한다.
 - Buffer 모듈은 데이터를 1 바이트씩 분리해 저장한다.

 - alloc
   : 지정된 바이트 만큼 기억공간이 만들어지고 0으로 
      초기화 된다.
 - allocUnsafe
   : 지정된 바이트 만큼 기억공간이 만들어지고 0으로
      초기화 되지 않는다.
      alloc에 비해 속도가 빠르다.
 - byteLength
   : 버퍼의 용량(바이트)을 반환한다.
 - length
   : 버퍼의 용량(바이트)을 반환한다.
 - from
   : 지정된 값을 관리하는 기억공간이 만들어진다.
 - compare
   : 두 기억 공간을 비교한다.
      (같으면 0, 첫 번째 버퍼가 값이 크면 1
         작으면 -1을 반환한다.)
 - concat
   : 배열 안에 있는 모든 버퍼를 하나로 합쳐
      새로운 버퍼를 만든다.
 - copy
   : 버퍼의 내용을 다른 버퍼에 복사한다.
 - entries
   : 버퍼의 내용을 [인덱스, 값] 형태의 객체로 만들어 
      가지고 있는 배열을 반환한다.
 - equals
   : 두 버퍼의 내용이 같은지 비교한다.
 - file
   : 버퍼에 지정된 값을 채워준다.
 - includes
   : 버퍼에 지정된 값이 있는지 확인한다.
 - indexOf
   : 버퍼에 지정된 값의 위치를 반환한다.
      (값이 없으면 -1을 반환한다.)
 - lastIndexOf
   : 버퍼에 지정된 값의 위치를 뒤에서부터 검사하여 반환한다.
      (값이 없으면 -1을 반환한다.)
 - isBuffer
   : 지정된 객체가 버퍼 객체인지 확인한다.
 - keys
   : 버퍼에 저장된 객체의 인덱스를 가져온다.
 - toString
   : 버퍼에 저장된 값을 문자열로 가져온다.


Cluster 모듈
 - node.js에서 병렬 처리를 위해 제공되는 모듈이다.
 - 작업 하나의 단위를 worker라고 부른다.
 - cluster 모듈 생성 후 fork 메서드를 호출하면 
   worker 하나가 생성되며 필요한 만큼 worker를 생성해
   병렬 처리를 하면 된다.
 - 보통 cpu 코어의 개수만큼 worker를 발생시켜 
   병렬 처리 한다.


Crypto 모듈
 - node.js에서 데이터 암호화 기능을 제공하는 모듈이다.
 - 현재 존재하는 대부분의 암호화 알고리즘을 지원하고 있다.
 - Crypto 모듈은 다음과 같이 생성한다.

   var crypto = require("crypto");

 - getCiphers
   : 지원하는 암호화 알고리즘 이름들을 반환한다.
 - createCipher
   : 암호화용 객체를 생성한다.
 - createDecipher
   : 복호화용 객체를 생성한다.
 - update
   : 데이터를 암호화 하거나 복호화 한다.
 - final
   : 암호화된 데이터에 마지막 종료 블럭을 추가한다.


dns 모듈
 - 지정된 도메인의 dns 정보를 알아올 수 있는 모듈이다.
 - 지정된 도메인의 ip 주소 등의 정보를 파악할 수 있다.
 - lookup: 지정된 도메인의 정보를 가져온다.



fs 모듈
 - node.js에서 파일에 데이터를 쓰고 읽어 올 수 있는 
   기능을 제공하는 모듈이다.
 - writeFile
   : 비 동기식으로 파일에 데이터를 쓴다.
      파일이 없으면 새롭게 만들고, 파일이 있으면 
      기존 데이터를 삭제하고 새로 작성한다.
 - appendFile
   : 비 동기식으로 파일에 데이터를 쓴다.
      파일이 없으면 새롭게 만들고, 파일이 있으면 
      기존 데이터 뒤에 추가로 작성한다.
 - readFile
   : 비 동기식으로 파일의 데이터를 읽어온다.
 - writeFileSync
   : 동기식으로 파일에 데이터를 쓴다.
      파일이 없으면 새롭게 만들고, 파일이 있으면 
      기존 데이터를 삭제하고 새로 작성한다.
 - appendFileSync
   : 동기식으로 파일에 데이터를 쓴다.
      파일이 없으면 새롭게 만들고, 파일이 있으면 
      기존 데이터 뒤에 추가 작성한다.


Global 모듈
 - node.js에서 모듈을 생성하지 않고, 사용할 수 있는 
   모듈들을 가지고 있는 모듈 객체이다.
 - Global 모듈 객체는 프로그램 시작과 동시에 생성되며,
   어디서든 사용이 가능하다.
 - Buffer
   : 메모리를 동적 할당 할 수 있는 모듈
 - __dirname
   : 현재 실행 중인 파일의 경로를 가지고 있다.
 - __filename
   : 현재 실행 중인 파일의 경로와 파일명을 가지고 있다.
 - setImmediate
   : 하나이 사건 처리가 끝나면 동작할 코드를 등록한다.
 - clearImmediate
   : 등록된 Immediate를 제거한다.
 - setInterval
   : 주어진 함수를 주어진 시간마다 계속 호출한다.
 - clearInterval
   : 등록된 Interval을 제거한다.
 - setTimeout
   : 주어진 함수를 주어진 시간 후에 한번 호출한다.
 - clearTimeout
   : 등록된 Timeout을 제거한다.
 - console
   : 화면 출력을 위한 객체이다.
 - exports
   : 개발자가 모듈을 만들 때 사용하는 객체이다.
 - require
   : 모듈 객체를 만드는 함수이다.


os 모듈
 - node.js 프로그램이 실행되고 있는 서버 커퓨터와 관련된
   정보를 제공한다.
 - arch
   : CPU 아키텍쳐 정보를 반환한다.
 - cpus
   : 컴퓨터의 CPU 정보를 반환한다.
 - totalmem
   : 총 메모리 양을 반환한다.
 - freemem
   : 여유 메모리 양을 반환한다.
 - hostname
   : 컴퓨터의 호스트 이름을 반환한다.
 - networkInterfaces
   : 컴퓨터에 장착된 통신 장비들의 정보를 반환한다.
 - platform
   : 실행 플랫폼의 정보를 반환한다.
 - release
   : 버전 정보를 반환한다.
 - temdir
   : 컴퓨터의 임시 폴더 경로를 반환한다.
 - type
   : OS 이름을 반환한다.
 - uptime
   : OS 동작 시간을 반환한다.
 - userInfo
   : 사용자 정보를 반환한다.



path 모듈
 - path 모듈은 경로에 관련된 기능을 제공하고 있다.
 - 경로에 대해 여러 작업이 필요할 경우 사용한다.
 

http 모듈
 - http 모듈은 웹 애플리케이션을 개발할 수 있도록 
  제공되는 모듈이다.
 - 일반적인 웹 서버와 동일하게 동작한다.
 - http 모듈은 웹 서버의 기능을 할 수 있는 모듈이다.
 - createServer: 웹 서버 개체를 만든다.
 - listen: 웹 서버를 동작시킨다.
 - 클라이언트가 전달하는 파라미터는 url 모듈을 이용하면
  코드로 받아 낼 수 있다.


외부 모듈 사용하기
 - node.js에서 제공하는 기본 모듈만으로는 개발하기에 
  충분하지 않다.
 - node.js는 오픈 소스 플랫폼으로 소스가 공개되어 있어 
  전 세계 개발자들이 다양하게 모듈을 만들 수 있게 되어 있다.
 - 이를 통해 수 많은 외부 모듈이 제작되고 있으며 이 때문에 
  node.js 프로그래밍은 좀 더 쉽게 좀 더 강력해지고 있다.


express 모듈
 - express 모듈은 웹 애플리케이션을 개발할 때 가장 많이
  사용되고 있는 외부 모듈이다.
 - express 모듈은 http 모듈에 비해 많은 기능을 갖추고
  있어 보다 손 쉽게 웹 애플리케이션을 개발 할 수 있게 된다.
 - express 모듈은 jade, ejs 등과 같은 동적 웹 페이지 
  파일을 지원하고 있어 보다 손 쉽게 애플리케이션 개발이
  가능하다.

 - express()
  : express 모듈에서 제공하는 기능을 사용할 수 있는 
    객체를 반환하는 함수
 - get
  : get 방식으로 요청이 발생했을 때 호출될 함수를 등록한다.
 - post
  : post 방식으로 요청이 발생했을 때 호출될 함수를 등록한다.
 - listen
  : 서버를 가동시킨다.



라우팅
 - 사용자 요청에 따라 응답 결과를 달리 전달하는 것을
  라우팅이라고 부른다.

  ex) Routing
    app.get("/", function (req, res) {
      // ROOT 라는 문자열을 보내겠다는 의미.
      res.send("ROOT"); 
    });

    app.get("/test", function (req, res) {
      res.send("TEST");
    });

 - 웹 개발시 이런 작업을 굉장히 많이 하게 되는데 하나의
  파일에 다 작성을 하면 유지보수시 어려울 수 있다.
 - js 파일을 만들어 작성하면 파일을 분리할 수 있어
  관리가 용이해진다.


HTML 랜더링
 - 앞서 살펴본 예제에서는 클라이언트 요청이 있을 때
  res.send 함수를 이용해서 응답 결과를 전달했다.

 - 만약, res.send()함수를 통해 html 코드 전체를 
  전달한다면 다음과 코드가 될 것이다.

    var html = "<!DOCTYPE html>"
            + "<html>"
            + "<head>"
            + "<meta charset='utf-8'/>"
            + "</head>"
            + "<body>"
            + "<h1>index.html</h1>"
            + "</body>"
            + "</html>"

 - 만약 수백 수천줄에 달하는 html을 위와 같이 작성해야
  한다면 개발에 굉장히 어려움을 줄 수 밖에 없다.
 - express 모듈은 외부 파일의 데이터를 읽어와 html 코드로
  만든 다음 클라이언트에게 전달하는 기능을 제공하는데
  이를 랜더링이라고 부른다.
 - express 에서 랜더링을 위해서는 다른 모듈을 사용해야 
  하는데 ㅇ기서는 ejs 모듈을 사용한다.


 - ejs 모듈 사용하기
  - ejs 모듈 설치
    npm install ejs --save

  - ejs 모듈을 사용하기 위해 모듈 객체를 생성한다.
    var ejs = require("ejs");

  - 다음으로 html 파일을 만들어 놓을 폴더를 지정한다.
    app.set("views", __dirname +"/views");

  - 다음으로 랜더링에 사용할 모듈을 지정한다.
    app.set("view engine", "ejs");

  - 다음으로 html일 경우 사용할 ejs 모듈을 지정한다.
    app.engine("html", ejs.renderFile);



 - 정적 파일 사용하기
  - html 문서에서 css, js, image, 동영상, 사운드 등의
    파일들을 사용할때는 정적 파일이 위치하는 폴더를
    지정하여 사용할 수 있다.



동적 웹 페이지
 - express에서 랜더링 모듈을 사용하면 동적 웹페이지를
  만들 수 있다.
 - 랜더링 모듈은 jade, ejs 등 다양하게 존재하고 있으며
  여기에서는 ejs 모듈을 사용하도록 한다.
 - ejs 모듈은 jsp 코드와 흡사하다.
 - 랜더링 엔진을 ejs로 설정하여 준다.
  
    app.set("views", __dirname + "/views");
    app.set("view engine", "ejs");
    app.engine("ejs", ejs.renderFile);

 - views 폴더에 필요한 만큼의 ejs 파일을 만들어준다.



요청 방식
 - 클라이언트가 서버에 요청할 때 get방식과 
  post 방식이 잇다.
 - get 방식은 서버로 전달할 데이터가 주소창에 모두 나타나면
 post는 숨겨져서 전달된다.
 - from 태그에서 method를 post로 줄 때를 제외한 
  나머지 모든 경우는 get 방식에 해당한다.
 - express에서 get 방식일 경우에는 get, 
  post 방식일 경우에는 post 함수가 호출된다.


파라미터
 - 파라미터란 클라이언트가 서버에 요청할 때 전달하는 
  데이터를 의미한다.
 - express에서 파라미터는 request 객체를 통해 파라미터
  추출이 가능하다.
 - get 방식의 경우 query라는 객체 안에 모두 들어 있다.
 - post 방식의 경우 bodyParser 모듈을 이용해야
  파라미터를 추출할 수 있따.

    npm install body-parser --save


쿠키
 - 쿠키란 클라이언트 측에 저자되는 데이터를 의미한다.
 - 클라이언트가 서버에 요청할 때 쿠키 정보를 
  전부 전달하게 된다.
  이를 통해 서버에서 사용자 컴퓨터에 저장된 쿠키 정보를
  사용할 수 있게 된다.
 - 쿠키는 사용자 컴퓨터에 저장되므로 브라우저를 닫아도
  데이터가 유지된다.
 - express에서 쿠키를 관리할 때는 cookie-parser 모듈을
  사용한다.

    npm install cookie-parser --save


세션
 - 세션은 서버 메모리에 데이터를 저장하는 방식으로
  브라우저 하나 당 하나의 공간이 할당된다.
 - 브라우절르 닫으면 세션은 삭제된다.
 - express에서 세션을 관리할 때 express-session 모듈을 
  사용한다.

    npm install express-session --save


데이터베이스 사용하기
 - 서버 프로그램 운영 시 발생되는 데이터는 
  반드시 저장되어야 다음에 사용할 수 있다.
 - 서버 프로그램 개발 시 데이터를 저장할 때 데이터베이스를
  많이 이용하는데 node.js 프로그램으로 데이터베이스를
  사용하는 방법에 대해 살펴보도록 한다.
 - 기본 모듈로는 제공되지 않고 외부 모듈을 사용해야 하는데
  npmjs.com에서 검색하면 모듈을 찾을 수 있다.
 - 여기에서는 mysql 데이터베이스를 이용하도록 한다.

 - 예제를 위한 데이터베이스 및 테이블 구조
    create database TestDB
    default character set utf8
    collate utf8_general_ci;

    use TestDB;

    create table TestTable(
      int_data int not null,
      str_data varchar(100) not null
    );

 - mysql 모듈 설치
    npm install mysql --save  

 - 데이터베이스 접속하기
  - 데이터베이스 접속을 위해 접속 정보를 가지고 있는
    객체를 만들어준다.

  - 데이터베이스에 접속한다.

 - 데이터 저장하기
  - mysql 모듈은 insert, update, delete, select 쿼리에
    대한 코드가 크게 다르지 않는다.
  - select는 데이터를 가져오는 쿼리문으로 데이터를 
    사용하는  부분만 조금 다르다.


미니프로젝트(방명록)
 - 로그인 페이지
  - 로그인 페이지는 작성자 이름을 입력하고 
    로그인 버튼을 누르는걸로 한다.
  - 입력한 이름은 세션에 저장해두고 방명록 작성시
    이름을 가져와 저장할 것이다.

 - 방명록 페이지
  - 방명록 페이지에서 방명록 내용을 입력하고 저장을 
    누르면 저장을 하게 된다.
  - 방명록 페이지 하단에는 그 동안 작성된 방명록 리스트가
    나타난다.
































